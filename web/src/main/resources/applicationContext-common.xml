<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
			http://www.springframework.org/schema/tx
			http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
			http://www.springframework.org/schema/aop
			http://www.springframework.org/schema/aop/spring-aop.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context.xsd"
       default-lazy-init="true">
    <!-- 数据源配置,使用应用内的DBCP数据库连接池 -->
    <context:property-placeholder location="classpath*:config.properties"/>

    <!-- 业务系统数据库 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${db.jdbcUrl}"/>
        <property name="username" value="${db.user}"/>
        <property name="password" value="${db.password}"/>
        <property name="initialSize" value="${db.minPoolSize}"/>
        <property name="maxActive" value="${db.maxPoolSize}"/>
        <property name="maxWait" value="${db.maxWait}"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
        <property name="filters" value="stat"/>
    </bean>

    <!-- Hibernate配置 -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan" value="com.michael.base.*.domain,com.michael.**.domain"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${db.hibernate.dialect}</prop>
                <prop key="hibernate.hbm2ddl.auto">${db.hibernate.hbm2ddl}</prop>
                <prop key="hibernate.jdbc.fetch_size">${db.hibernate.fetchSize}</prop>
                <prop key="hibernate.jdbc.batch_size">${db.hibernate.batchSize}</prop>
                <prop key="hibernate.show_sql">${db.hibernate.showSql}</prop>
                <prop key="hibernate.format_sql">${db.hibernate.formatSql}</prop>
                <prop key="hibernate.default_schema">#{${db.hibernate.schema}?${db.hibernate.schema}:''}</prop>
                <prop key="hibernate.query.substitutions">true 1, false 0</prop>
            </props>
        </property>
        <property name="entityInterceptor" ref="hibernateInterceptor"/>
    </bean>

    <!-- Hibernate拦截器 -->
    <bean id="hibernateInterceptor" class="com.michael.core.hibernate.HibernateInterceptor"/>

    <!-- 定义系统启动后要执行的操作 -->
    <bean id="springLoadListenerContainer" class="com.michael.core.spring.SpringLoadListenerContainer"
          factory-method="getInstance">
        <property name="listeners">
            <list>
                <!-- 初始化com.michael.core.SystemContainer-->
                <bean class="com.michael.core.InitSystemContainer"/>
                <!-- 初始化定时清理附件垃圾数据 -->
                <bean class="com.michael.base.attachment.service.ClearTempService"/>
            </list>
        </property>
    </bean>

    <!-- 事务管理器配置,单数据源事务 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--
      | 基本事务定义,使用transactionManager作事务管理
      | 默认get*方法的事务为readonly,其余方法按默认设置
      | 默认的设置请参考Spring文档事务一章
      -->
    <!-- 事务AOP -->
    <aop:config>
        <aop:pointcut id="txPointcut" expression="execution(* *..service..*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" order="10"/>
    </aop:config>


    <!--  事务 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true" propagation="NOT_SUPPORTED"/>
            <tx:method name="find*" read-only="true" propagation="NOT_SUPPORTED"/>
            <tx:method name="search*" read-only="true" propagation="NOT_SUPPORTED"/>
            <tx:method name="query*" read-only="true" propagation="NOT_SUPPORTED"/>
            <tx:method name="has*" read-only="true" propagation="NOT_SUPPORTED"/>
            <tx:method name="check*" read-only="true" propagation="NOT_SUPPORTED"/>
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>


</beans>